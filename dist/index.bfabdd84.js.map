{"mappings":"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","sources":["src/js/patternizer.js"],"sourcesContent":["/*\r\n * patternizer.js\r\n * v1.1.0\r\n * To see what this is capable of, see the UI at patternizer.com\r\n *\r\n * Developed by Matthew Lein\r\n * matthewlein.com\r\n *\r\n * Released under the MIT license.\r\n * Please leave this license and author info intact.\r\n *\r\n * Copyright 2017\r\n */\r\n\r\nvar patternizer = {\r\n  supportsCanvas: function () {\r\n    var elem = document.createElement(\"canvas\");\r\n    return !!(elem.getContext && elem.getContext(\"2d\"));\r\n  },\r\n\r\n  // nabbed from http://www.hunlock.com/blogs/Mastering_Javascript_Arrays#quickIDX34\r\n  isArray: function (testObject) {\r\n    return (\r\n      testObject &&\r\n      !testObject.propertyIsEnumerable(\"length\") &&\r\n      typeof testObject === \"object\" &&\r\n      typeof testObject.length === \"number\"\r\n    );\r\n  },\r\n\r\n  DEGREES_RADIANS: function (degrees) {\r\n    return (degrees * Math.PI) / 180;\r\n  },\r\n\r\n  HEX_RGBA: function (color, alpha) {\r\n    var r = parseInt(color.substring(1, 3), 16);\r\n    var g = parseInt(color.substring(3, 5), 16);\r\n    var b = parseInt(color.substring(5, 7), 16);\r\n    var a = alpha;\r\n\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n  },\r\n\r\n  normalizeStripes: function (stripes) {\r\n    stripes = stripes.map(function (stripe) {\r\n      if (stripe.mode) {\r\n        stripe.plaid = stripe.plaid || stripe.mode === \"plaid\";\r\n        delete stripe.mode;\r\n      }\r\n      return stripe;\r\n    });\r\n    return stripes;\r\n  },\r\n\r\n  stripe: function (canvas, options) {\r\n    var stripes = patternizer.normalizeStripes(options.stripes);\r\n    var bgColor = options.bg;\r\n\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var cWidth = canvas.width;\r\n    var cHeight = canvas.height;\r\n    var diagLength = Math.sqrt(cWidth * cWidth + cHeight * cHeight);\r\n\r\n    //draw background color\r\n    ctx.fillStyle = bgColor;\r\n    ctx.fillRect(0, 0, cWidth, cHeight);\r\n\r\n    //draw stripes\r\n    for (var j = stripes.length - 1; j >= 0; j--) {\r\n      var current = stripes[j],\r\n        opacity = current.opacity / 100 || 0.5,\r\n        color = patternizer.HEX_RGBA(current.color, opacity),\r\n        plaid = current.plaid || false,\r\n        rotate = current.rotation || 0,\r\n        stripeWidth = current.width,\r\n        offset = current.offset || 0,\r\n        gap = current.gap || stripeWidth,\r\n        tile = stripeWidth + gap,\r\n        repeats = (diagLength * 2 + offset) / tile;\r\n\r\n      // rotate\r\n      ctx.rotate(patternizer.DEGREES_RADIANS(rotate));\r\n\r\n      for (var i = 0; i < repeats; i++) {\r\n        if (patternizer.isArray(color)) {\r\n          // I'm hoping its an array of colors\r\n\r\n          var startStripe = tile * i + offset,\r\n            endStripe = tile * i + offset + stripeWidth,\r\n            lingrad = ctx.createLinearGradient(startStripe, 0, endStripe, 0),\r\n            //get the number of color stops needed\r\n            stopAmount = 1 / (color.length - 1);\r\n\r\n          // put in the color stops evenly across the rectangle\r\n          for (var k = 0; k < color.length; k++) {\r\n            lingrad.addColorStop(stopAmount * k, color[k]);\r\n          }\r\n\r\n          ctx.fillStyle = lingrad;\r\n        } else {\r\n          // its a plain old string color\r\n          ctx.fillStyle = color;\r\n        }\r\n\r\n        // drawing x\r\n        ctx.fillRect(\r\n          -diagLength + tile * i - offset,\r\n          -diagLength,\r\n          stripeWidth,\r\n          diagLength * 2\r\n        );\r\n\r\n        if (plaid) {\r\n          // drawing y\r\n          ctx.fillRect(\r\n            -diagLength,\r\n            -diagLength + tile * i - offset,\r\n            diagLength * 2,\r\n            stripeWidth\r\n          );\r\n        }\r\n      }\r\n\r\n      //rotate back\r\n      ctx.rotate(-patternizer.DEGREES_RADIANS(rotate));\r\n    }\r\n  },\r\n};\r\n\r\nif (patternizer.supportsCanvas) {\r\n  // prototype the patternizer method onto canvas\r\n  HTMLCanvasElement.prototype.patternizer = function (options) {\r\n    // pass in the canvas and options\r\n    patternizer.stripe(this, options);\r\n    //return for chaining\r\n    return this;\r\n  };\r\n}\r\n"],"names":[],"version":3,"file":"index.bfabdd84.js.map","sourceRoot":"/__parcel_source_root/"}